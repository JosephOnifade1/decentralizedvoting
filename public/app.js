// Connect to the local Ganache blockchain
const web3 = new Web3('http://localhost:7545'); // Update with your Ganache URL

// Import the compiled Voting contract artifact
const VotingContract = require('./build/contracts/Voting.json');

// Create a contract instance
const votingContract = new web3.eth.Contract(
  VotingContract.abi,
  '0x608060405234801561000f575f80fd5b5060043610610060575f3560e01c806309eef43e1461006457806316661440146100945780638da5cb5b146100c4578063d3b4e1f6146100e2578063fc36e15b14610112578063fe0174bd1461012e575b5f80fd5b61007e600480360381019061007991906103d4565b61014c565b60405161008b9190610419565b60405180910390f35b6100ae60048036038101906100a9919061056e565b610169565b6040516100bb91906105cd565b60405180910390f35b6100cc610196565b6040516100d991906105f5565b60405180910390f35b6100fc60048036038101906100f7919061056e565b6101b9565b60405161010991906105cd565b60405180910390f35b61012c6004803603810190610127919061056e565b6101e0565b005b610136610342565b60405161014391906105f5565b60405180910390f35b6001602052805f5260405f205f915054906101000a900460ff1681565b6002818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f6002826040516101ca919061067a565b9081526020016040518091039020549050919050565b60015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff161561026a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610261906106ea565b60405180910390fd5b60028160405161027a919061067a565b90815260200160405180910390205f81548092919061029890610735565b91905055506001805f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fcb6783276e8a4347387036bbfea000268f0a4b1f8c46ac79980609f2af8d2acd8260405161033791906107b4565b60405180910390a250565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103a38261037a565b9050919050565b6103b381610399565b81146103bd575f80fd5b50565b5f813590506103ce816103aa565b92915050565b5f602082840312156103e9576103e8610372565b5b5f6103f6848285016103c0565b91505092915050565b5f8115159050919050565b610413816103ff565b82525050565b5f60208201905061042c5f83018461040a565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6104808261043a565b810181811067ffffffffffffffff8211171561049f5761049e61044a565b5b80604052505050565b5f6104b1610369565b90506104bd8282610477565b919050565b5f67ffffffffffffffff8211156104dc576104db61044a565b5b6104e58261043a565b9050602081019050919050565b828183375f83830152505050565b5f61051261050d846104c2565b6104a8565b90508281526020810184848401111561052e5761052d610436565b5b6105398482856104f2565b509392505050565b5f82601f83011261055557610554610432565b5b8135610565848260208601610500565b91505092915050565b5f6020828403121561058357610582610372565b5b5f82013567ffffffffffffffff8111156105a05761059f610376565b5b6105ac84828501610541565b91505092915050565b5f819050919050565b6105c7816105b5565b82525050565b5f6020820190506105e05f8301846105be565b92915050565b6105ef81610399565b82525050565b5f6020820190506106085f8301846105e6565b92915050565b5f81519050919050565b5f81905092915050565b5f5b8381101561063f578082015181840152602081019050610624565b5f8484015250505050565b5f6106548261060e565b61065e8185610618565b935061066e818560208601610622565b80840191505092915050565b5f610685828461064a565b915081905092915050565b5f82825260208201905092915050565b7f596f75206861766520616c726561647920766f746564000000000000000000005f82015250565b5f6106d4601683610690565b91506106df826106a0565b602082019050919050565b5f6020820190508181035f830152610701816106c8565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61073f826105b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361077157610770610708565b5b600182019050919050565b5f6107868261060e565b6107908185610690565b93506107a0818560208601610622565b6107a98161043a565b840191505092915050565b5f6020820190508181035f8301526107cc818461077c565b90509291505056fea2646970667358221220e7447eb1b71a11a06dc4987481165b1473463a89b5fb00845b76a32bf265d43d64736f6c63430008150033'
 // Update with your deployed contract address
);

// Function to populate candidates dropdown and results
async function initialize() {
  // Fetch candidates from the contract
  const candidates = ['Candidate1', 'Candidate2', 'Candidate3']; // Update with your actual candidates

  // Populate candidates dropdown
  const candidateSelect = document.getElementById('candidateSelect');
  candidates.forEach(candidate => {
    const option = document.createElement('option');
    option.value = candidate;
    option.text = candidate;
    candidateSelect.add(option);
  });

  // Display candidates list
  const candidatesList = document.getElementById('candidatesList');
  candidatesList.innerHTML = candidates.map(candidate => `<li>${candidate}</li>`).join('');

  // Display initial results
  await displayResults();
}

// Function to handle voting
async function vote() {
  const candidateSelect = document.getElementById('candidateSelect');
  const selectedCandidate = candidateSelect.value;

  if (!selectedCandidate) {
    alert('Please select a candidate to vote.');
    return;
  }

  try {
    // Send vote transaction
    const accounts = await web3.eth.getAccounts();
    await votingContract.methods.vote(selectedCandidate).send({ from: accounts[0] });

    // Display updated results
    await displayResults();
  } catch (error) {
    console.error('Error voting:', error);
    alert('Error voting. Please check the console for details.');
  }
}

// Function to display results
async function displayResults() {
  const resultsList = document.getElementById('resultsList');
  const candidates = ['Candidate1', 'Candidate2', 'Candidate3']; // Update with your actual candidates

  // Fetch and display votes for each candidate
  const promises = candidates.map(async candidate => {
    const votes = await votingContract.methods.getVotesForCandidate(candidate).call();
    return `<li>${candidate}: ${votes} votes</li>`;
  });

  const results = await Promise.all(promises);
  resultsList.innerHTML = results.join('');
}

// Initialize the UI
initialize();